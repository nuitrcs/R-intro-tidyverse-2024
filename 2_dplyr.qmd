---
output:
  html_document:
    df_print: paged
    code_download: TRUE
    toc: true
    toc_depth: 1
editor_options:
  chunk_output_type: console
---

```{r, setup, include=FALSE}
# you don't need to run this when working in RStudio
knitr::opts_chunk$set(eval=FALSE)  # when making the html version of this file, don't execute the code
```

This is a [Quarto](https://quarto.org/) document. Follow the link to learn more about Quarto and the notebook format used during the workshop.

# Setup

```{r, eval=T}
library(tidyverse)
library(NHANES)
nhs <- NHANES # rename for ease
```

```{r, eval=TRUE}
qog <- readr::read_csv(
  "data/qog_data.csv",
  col_types = c("br_elect" = "c", "ht_region" = "c", "act_act" = "c")
  )
```

This file goes into more detail on the select and filter functions we talked about before, and adds in mutate for changing variables or making new ones.

# Select: Choose Columns

The previous session covered the basics of `select` but there are many more options for how we can specify which columns to choose.

First, let's remember what the column names are:

```{r, eval=F}
names(qog)
```

Recall that the `select` function takes as the first input a data frame, and then we can list one or more columns, names unquoted, that we want to select. The columns will be ordered in the order we specify them. Notice that the order in the output is different than the original order above.

```{r, eval=F}
qog %>% select(cname_qog, year)
select(qog, cname_qog, year)
```

## Ranges

There are a number of select helper functions and special syntax options that allow us to choose multiple columns.

First, we can use `:` for range, but with names in addition to numbers:

```{r, eval=F}
qog %>% select(cname_qog:act_act)
```

The result is the same if we use numbers:

```{r, eval=F}
qog %>% select(1:5)
```

We can select the rightmost columns with `last_col()` (you can check with `names` that it is the "last" column in our dataset):

```{r, eval=F}
qog %>% select(last_col())
```

You can use `offset` to count columns from the right:

```{r}
select(qog, last_col(offset=3))
```

This is one of the few places R acts like it's counting from 0, that's because it's the number of columns to offset from the end:

```{r}
# these are the same
select(qog, last_col(0)) %>% names()
select(qog, last_col()) %>% names()
```

### EXERCISE

Select just the first 6 columns of nhs.

```{r}

```

## Excluding columns

We can also say which columns we don't want by putting a `-` (minus) in front of the name. Think about it as subtracting one or more columns.

```{r, eval=F}
ncol(qog)
ncol(qog %>% select(-epi_cda, -epi_msw, -epi_uwd))
```

When using negated `-` column names, if we start with negations and try to mix in columns we want to keep, it will get messy. Make sure to *avoid* the following code:

```{r, eval=F}
names(qog %>% select(-epi_cda, -epi_msw, -epi_uwd, -year, cname_qog:act_act)) 
```

Notice that we get many more columns than just those between cname_qog and act_act? We even got year! That's not what we wanted.

To both specify the columns wanted and exclude some that would otherwise be selected, the exclusions need to come at the end:

```{r, eval=F}
names(qog %>% select(cname_qog:act_act, -epi_cda, -epi_msw, -epi_uwd, -year)) 
```

We don't need to include -epi_cda, -epi_msw, and -epi_uwd because they are not part of the range between cname_qog and act_act. If we don't include them, we will still get the same result.

```{r, eval=F}
names(qog %>% select(cname_qog:act_act, -year)) 
```

### EXERCISE

Drop the last 4 columns from `nhs`. Do it only temporarily - write an expression that will give you police with those columns not included. Don't assign the result back to `nhs`.

```{r}

```

## Reordering and renaming

We've already seen that columns will appear in the result in the order that we list the names.

If we list a column name more than once, it will appear in the first position only (it won't be repeated):

```{r}
names(select(qog, year, cname_qog, year, ht_region))
```

If you want to pull a few columns over to the left so that they are the ones that show first when you look at the data, the everything() helper function can be useful.

```{r, eval=F}
names(select(qog, epi_cda, epi_msw, epi_uwd, everything()))
```

We can also rename columns while using `select()`. The syntax is `new_name = old_name`.

```{r, eval=F}
names(qog %>% select(country_name=cname_qog, year, ht_region))
```

or we can use `rename()` to only rename, without affecting which columns are included or their order (all of the columns are kept in the same order):

```{r, eval=F}
names(qog %>% rename(country_name=cname_qog))
```

Remember, this doesn't change `qog` because we didn't save the result. So far, we've just been printing the output that is returned by the function. If we want to change our data frame, we'd need to save the result.

### EXERCISES

Remember: run the cells above to load tidyverse and import the data.

Using `select` and/or `rename` as needed:

-   Rename `DirectChol` to `HDL_Chol` and `TotChol` to `Total_HDL_Chol`, but keep the columns in their original order
-   Exclude the `ID` and `SurveyYr` columns

Hint:

-   Remember that you can chain dplyr commands together with `%>%`
-   You don't need to save the results in a new variable

```{r}

```

## Matching names

We can also select by matching patterns in the names of the columns. The patterns to match are in quotes because they aren't column names -- just character data.

```{r, eval=F}
names(qog %>% select(starts_with("epi_")))
```

You can also use `ends_with()` and `contains()`. You can also put a `-` in front of these helper functions to exclude columns. And there are even more [select helper functions](https://tidyselect.r-lib.org/reference/language.html).

### EXERCISE

Use `select()` to get a copy of `nhs` without the columns that start with "BP".

In other words, drop the columns that start with "BP", except 1) don't permanently change `nhs` and 2) instead of dropping, we're really selecting what we want to keep instead.

```{r, }

```

## Selecting with Vectors or Functions

What if we have the names of the columns we want to select in a vector already? For example:

```{r, eval=TRUE}
analysis_vars <- c("cckp_rain", "wdi_co2")
```

Perhaps we built this vector programatically (we wrote code to determine the values, instead of typing them ourselves), so we can't just rewrite it to:

```{r, eval=F}
qog %>% select(cckp_rain, wdi_co2)
```

If we just give the vector to `select`, it looks like we expect "analysis_vars" to be a column name in qog We get a warning:

```{r}
qog %>% select(analysis_vars)
```

This warning tells us what we should do instead, which is use `all_of`:

```{r, eval=F}
qog %>% select(all_of(analysis_vars))
```

This makes it clearer that "analysis_vars" isn't the name of a column in qog.

What if we want to select columns of a certain type -- for example, only the numeric columns?

```{r, eval=F}
qog %>% select(where(is.numeric))
```

`is.numeric` is the name of a function. We just use the name without `()`. This function is applied to each column, and if it returns TRUE, then the column is selected. Like above with using a vector, we wrap the function we want to use in `where` to make it clear that we're using a function, not looking for a column named "is.numeric").

`where` can be used with any function that returns a *single* TRUE or FALSE value for each column.

### EXERCISE

Select columns with numerical data from `nhs`:

```{r}

```

## Combining multiple select conditions

What if we want to combine multiple select conditions? For example, select columns from police that contain "cckp" and are numeric data?

We can use & and \|

```{r}
select(qog, contains("cckp") & where(is.numeric))
```

# Filter: Choose Rows

The `filter()` function lets us choose which rows of data to keep by writing expressions that return TRUE or FALSE for every row in the data frame. Recall:

```{r, eval=F}
qog %>%  filter(year == 2020)
```

We can do complex conditions as we could do with `[]`

```{r, eval=F}
qog %>%  filter(year == 2020 & cname_qog == "United States")
```

If we include multiple comma-separated conditions, they are joined with `&` (and). So this following is equivalent to the above:

```{r, eval=F}
qog %>%  filter(year == 2020, cname_qog == "United States")
```

### EXERCISES

1.  Filter `nhs` to choose the rows where HealthGen is Excellent or Vgood
2.  Filter `nhs` to choose the rows where HealthGen is Excellent or Vgood, and AgeDecade is "40-49"

Hints:

-   The "or" operator is `|`; the "and" operator is `&`
-   Use `levels(nhs$AgeDecade)` to get the names of the categories

```{r}

```

## Including Variable Transformations

When filtering, we can include transformations of variables in our expressions.

Let's create a new variable for the qog data only for 2015.

```{r}
qog_2015 <- filter(qog, year == 2015)
```


Now, let's filter to see which countries have above average wdi_co2 in 2015:

```{r, eval=F}
qog_2015 %>% 
  filter(wdi_co2 > mean(wdi_co2, na.rm = TRUE)) %>% 
  select(cname_qog)
```

Or which country has the most wdi_co2 in 2015:

```{r,  eval=F}
qog_2015 %>% 
  filter(wdi_co2 == max(wdi_co2, na.rm = TRUE))
```

### EXERCISES

Using `nhs`, find the subject(s) with the minimum (`min()`) Pulse value, remember to remove or ignore NA values if they are present.

```{r}

```

Find subjects that sleep more than the median number of sleep hours in the data.

```{r}

```

## EXERCISE

Using `nhs`, find subjects that don't have the string "College" in the `Education` column.

The `Education` variable has a few categories. Take a look:

```{r}
table(nhs$Education)
```

Write code to find subjects that do have the string "College" - str_detect() is a useful function for this. Example:

```{r}
nhs %>%
  filter(str_detect(Work, "Working")) %>% 
  select(Poverty)
```

Now find the subjects that DON'T have the string "College" in the `Education` column.

```{r}

```

# Mutate: Change or Create Columns

`mutate()` is used to both change the values of an existing column and make a new column.

We name the column we're mutating and set the value. If the name already exists, it will update the column. If the name doesn't exist, it will create a new variable (column is appended at the end of the existing columns).

```{r, eval=TRUE}
qog %>% 
  mutate(cckp_rain_cm = cckp_rain / 10) %>% 
  names()
```

We can put multiple mutations in the same call to mutate, with the expressions separated by commas:

```{r,  eval=TRUE}
qog %>% 
  mutate(
    cckp_rain_cm = cckp_rain / 10,
    cckp_temp_fh = (cckp_temp * 9/5) + 32
    ) %>% 
  names()
```

Within a call to mutate, we can refer to variables we made or changed earlier in the same call as well:

```{r, eval=TRUE}
qog %>% 
  mutate(
    cckp_rain_cm = cckp_rain / 10,
    cckp_temp_fh = (cckp_temp * 9/5) + 32,
    hot = ifelse(cckp_temp_fh > 80, TRUE, FALSE)
    ) %>% 
  filter(hot)
```

Side note: there is a tidyverse version of `ifelse()` called `if_else()` -- with the underscore or low dash symbol -- that works generally the same except it is stricter about checking data types.

`mutate()` can also change an existing column. It will overwrite it.

```{r, eval=TRUE}
qog %>% 
  mutate(cckp_temp = (cckp_temp * 9/5) + 32) %>% 
  select(cckp_temp) %>%
  pull() %>% 
  hist()
```

We didn't save the output, so the column hasn't changed permanently - only in the output.

```{r}
hist(qog$cckp_temp)
```

Remember that when using `mutate()`, you're operating on the entire column at once, so you can't select just a subset of the vector as you would with `[]`. This means more frequently using functions like `ifelse()` or helper functions such as `na_if()`, `replace_na()`, or `recode()`.

`na_if` replaces an existing value with `NA`. `replace_na` does roughly the opposite: replaces `NA` with a new value. `na_if()` can only check and replace one value at a time; it also can't be used with any expressions (`x <= 1`) -- only single values.

### EXERCISE

If the column `HealthGen` in `nhs` is `NA` replace it with `Fair`using `mutate()`.

```{r}

```

### EXERCISE

If the column `PregnantNow` is `Unknown` or `No` set it to `NA` using `mutate()`

Hint: it's ok if you take two steps to do this.

```{r}

```

# Recap

You now can use `select` and `filter` to subset your data in a wide variety of ways, and `mutate` to update variables or create new ones.

Later: the three other common dplyr "verb" functions for working with data frames: `group_by`, `summarize`, and `arrange`.
