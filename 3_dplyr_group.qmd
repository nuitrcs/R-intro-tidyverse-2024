---
output:
  html_document:
    df_print: paged
    code_download: TRUE
    toc: true
    toc_depth: 1
editor_options:
  chunk_output_type: console
---

```{r, setup, include=FALSE}
knitr::opts_chunk$set(
  eval=FALSE, warning=FALSE, error=FALSE
)
```

*The output of most of the R chunks isn't included in the HTML version of the file to keep it to a more reasonable file size. You can run the code in R to see the output.*

This is a [Quarto](https://quarto.org/) document. Follow the link to learn more about Quarto and the notebook format used during the workshop.

# Setup

```{r, eval=TRUE, message=FALSE}
library(tidyverse)
library(NHANES)
nhs <- NHANES
```

Now we'll be learning three additional dplyr functions: group_by, summarize, and arrange.

## Data

We're using the same data as before.

```{r, eval=TRUE}
qog <- readr::read_csv(
  "data/qog_data.csv",
  col_types = c("br_elect" = "c", "ht_region" = "c", "act_act" = "c")
  )
```

We'll also use the built-in dataset mtcars:

```{r}
mtcars
```

# Summarize

We'll start with `summarize()` (or `summarise()` - British spelling is accepted).

We use `mutate()` when we want the output to have the same length as the input. In other words, we use `mutate()` when we're operating on the individual elements in a vector - we want a value for every row in the data.

When we want to condense multiple values down to a single (or a few values), such as taking the mean or standard deviation of a vector, we use summarize instead:

```{r}
qog %>% 
  mutate(cckp_rain_cm = cckp_rain / 10) %>% 
  summarize(mean_cckp_rain = mean(cckp_rain_cm, na.rm = TRUE))
```

Note that even though there's just one value, we get a tibble returned. This is what to expect with the tidyverse.

As a side note, if we needed the single value (or a single vector), we could `pull()` it out of the tibble/data frame:

```{r}
qog %>% 
  mutate(cckp_rain_cm = cckp_rain / 10) %>% 
  summarize(mean_cckp_rain = mean(cckp_rain_cm, na.rm = TRUE)) %>% 
  pull()
```

We can compute more than one summary measure at the same time:

```{r}
qog %>% 
  mutate(cckp_rain_cm = cckp_rain / 10) %>% 
  summarize(
    mean_cckp_rain = mean(cckp_rain_cm, na.rm = TRUE),
    min_year = min(year),
    max_year = max(year)
    )
```

We get one column per summary variable we create. Once we group below, we'll see why we get the output in columns instead of rows.

### EXERCISE

Use summarize to compute the `min()` and `max()` `AgeFirstMarij`

```{r}

```

### n()

A useful helper function with summarize is n() which counts the number of rows. It can be useful in computing proportions.

```{r}
qog %>% 
  filter(year == 2015) %>% 
  summarize(
    act_act = sum(act_act == 1, na.rm = TRUE), # count the true values
    total_obs = n(),
    prop_act_act = act_act / n()
  )
```

### EXERCISE

What proportion of females smoke currently?

```{r}

```

## Across

If we want to apply the same summary functions to multiple columns in our data frame, we can write out all of the summary commands explicitly, or we can use `across()` to select which variables to summarize with which functions. `across()` selects columns using the helper functions you could give to `select()` directly.

```{r}
na.omit(qog) %>% 
  summarize(across(where(is.numeric), mean))
```

If you wanted to select columns using their names, put them in a vector (so it's a single input argument):

```{r}
na.omit(qog) %>% 
  summarize(across(c(cckp_rain, cckp_temp), mean))

```

If we want to apply multiple functions to each column, we put their names in a list() together:

```{r}
na.omit(qog) %>% 
  summarize(across(where(is.numeric), list(mean, sd)))
```

To fix the names in the output, explicitly name our summary functions in the list:

```{r}
na.omit(qog) %>% 
  summarize(across(where(is.numeric), list(avg=mean, std=sd)))
```

There are other options for output naming patterns available too.

Side note: What if we want to do something to each column that is more complicated than a single function? For example, counting missing values, which you do with `sum(is.na(x))`. You can write your own function! You can read more about functions [here](https://r4ds.had.co.nz/functions.html). More on this in the Intermediate Tidyverse Workshop.

## EXERCISE

Using the built-in dataset mtcars, get the average of each column.

```{r}

```

Now get the min and max of just the first three columns:

```{r}

```

# Group By

With base R, when we want to compute summary measures or do other computation on groups in our data (as defined by some grouping variable), we use functions such as `tapply()` or `aggregate()`. With dplyr, we can explicitly group our tibble into subgroups. This isn't very useful by itself, but it is often combined with `summarize()` to compute summary measures by group.

First, what if we just group:

```{r}
qog %>% 
  group_by(ht_region)
```

When we print this in the console, we see that it tells us that the tibble (data frame) is grouped by ht_region, and that there are 11 groups. It doesn't rearrange the rows, it just keeps track of the groups for us.

Now, let's combine it with summarize. But first, let's make the `cckp_rain_cm` column we've been using actually part of the `qog` dataset so that we don't have to keep creating it:

```{r, eval=TRUE}
qog <- mutate(qog, cckp_rain_cm = cckp_rain / 10)
```

Now, group and summarize:

```{r}
qog %>% 
  group_by(ht_region) %>% 
  summarise(
    mean_wdi_co2 = mean(wdi_co2, na.rm = TRUE),
    sd_wdi_co2 = sd(wdi_co2, na.rm = TRUE)
  ) 
```

Now we get one row for each group, and one column for each summary measure.

We can group by multiple columns, and we'll get all of the combinations of values present across the columns:

```{r}
qog %>% 
  group_by(ht_region, br_elect) %>% 
  summarise(
    mean_wdi_co2 = mean(wdi_co2, na.rm = TRUE),
    sd_wdi_co2 = sd(wdi_co2, na.rm = TRUE)
  ) 
```

### EXERCISE

Compute the `min()` and `max()` `BMI` for each `AgeDecade`.

```{r}

```

## EXERCISE

Using mtcars, compute the average horsepower (hp) for each \# of cylinders (cyl)

```{r}

```

Now compute the average value of each variable by \# of cylinders

```{r}

```

## Ungrouping

If you ever have a grouped data frame, you may need to ungroup it to get rid of the groups. To do so, use `ungroup()`:

```{r}
qog %>% 
  group_by(ht_region) %>%
  ungroup()
```

Usually this would come up after more complicated operations, and often after computing summary measures by group.

## Slicing

One operation we could do with a grouped tibble is to select just certain rows from each group. For example, we could use the `slice()` function to select the first row from each group:

```{r}
qog %>% 
  select(ht_region, everything()) %>% 
  group_by(ht_region) %>% 
  slice(1)
```

If you look at this output in the console, you'll see the resulting tibble still has groups in it. This is a case where you might want to ungroup:

```{r}
qog %>% 
  select(ht_region, everything()) %>% 
  group_by(ht_region) %>% 
  slice(1) %>% 
  ungroup()
```

Instead of using slice by itself, we're more likely to want to use slice_max or slice_min, or combine slice with sorting the rows in a particular order.

# Arrange

Finally, we come to `arrange()`, which is how we sort the rows in our data. We would mostly use this when viewing our data, but it's also useful when we need to compute a time series (lags and leads in the data), when we want to select just a few rows from each group, or any other order-sensitive transformations on our data.

```{r}
arrange(qog, year)
```

To sort in reverse order, wrap the column name in `desc()`.

```{r}
arrange(qog, desc(year))
```

Arrange by multiple columns, in order:

```{r}
arrange(qog, cname_qog, desc(year))
```

An example where it matters: change between years.

First, we want to make sure the data are in chronological order:

```{r}
qog %>% 
  arrange(cname_qog, year)
```

Then compute the difference between each value and the previous value. The lag() function helps us do this:

```{r}
qog %>% 
  arrange(cname_qog, year) %>% 
  mutate(wdi_co2_change = wdi_co2 - lag(wdi_co2)) %>% 
  select(cname_qog, year, wdi_co2, wdi_co2_change) %>% 
  View()
```

### EXERCISE

Sort the data by AgeDecade and then TVHrsDay.

```{r}

```

Using a slice function, get the minimum TVHrsDay for each AgeDecade.

```{r}

```

# Count

Count is how you'd get output similar to `table()` - it is used to count rows, either overall or in groups. It's a shortcut for summarizing and using `n()`.

By itself, it counts the number of rows ("n" by default):

```{r}
qog %>%
  count()
```

If you supply the name of a column, it makes a table:

```{r}
qog %>%
  count(ht_region)
```

This is the same result as if you grouped the data first:

```{r}
qog %>% 
  group_by(ht_region) %>% 
  count()
```

You can group by multiple columns directly with count:

```{r}
qog %>% 
  count(ht_region, br_elect)
```

### EXERCISE

How many times does each type of MaritalStatus appear in the dataset? Bonus: sort the results from most to least frequent. You can do this with `arrange()` or look at the documentation for `count()` to find another option.

```{r}

```

# Recap

We've now covered the core dplyr functions: six "verbs" of common actions we may take with a data frame. There are lots of helper functions, variations, and special cases that can come up when using these functions, but we've covered the essentials.

All of these functions were for working with a single data frame. In Intermediate Tidyverse we'll talk about dplyr functions that will help us combine two different data frames together.